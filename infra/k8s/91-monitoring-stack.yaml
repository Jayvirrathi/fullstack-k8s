apiVersion: v1
kind: ConfigMap
metadata:
  name: loki-config
  namespace: default
data:
  loki-config.yml: "auth_enabled: false\n\nserver:\n  http_listen_port: 3100\n\ncommon:\n\
    \  path_prefix: /loki\n  storage:\n    filesystem:\n      chunks_directory: /loki/chunks\n\
    \      rules_directory: /loki/rules\n  replication_factor: 1\n  ring:\n    instance_addr:\
    \ 127.0.0.1\n    kvstore:\n      store: inmemory\n\nschema_config:\n  configs:\n\
    \  - from: 2023-01-01\n    store: boltdb-shipper\n    object_store: filesystem\n\
    \    schema: v13\n    index:\n      prefix: index_\n      period: 24h\n\nstorage_config:\n\
    \  boltdb_shipper:\n    active_index_directory: /loki/index\n    cache_location:\
    \ /loki/boltdb-cache\n    shared_store: filesystem\n\nruler:\n  storage:\n   \
    \ type: local\n    local:\n      directory: /loki/rules\n  ring:\n    kvstore:\n\
    \      store: inmemory\n  rule_path: /loki/rules-temp\n  # If you add Alertmanager\
    \ later, update this URL:\n  alertmanager_url: http://alertmanager.default.svc.cluster.local:9093\n\
    \  enable_alertmanager_v2: true\n\ncompactor:\n  working_directory: /loki/boltdb-shipper-compactor\n\
    \  shared_store: filesystem\n"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loki
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: loki
  template:
    metadata:
      labels:
        app: loki
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 10001
        fsGroup: 10001
      containers:
      - name: loki
        image: grafana/loki:2.9.8
        args:
        - -config.file=/etc/loki/loki-config.yml
        ports:
        - containerPort: 3100
          name: http
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 1Gi
        volumeMounts:
        - name: loki-config
          mountPath: /etc/loki
        - name: loki-data
          mountPath: /loki
      volumes:
      - name: loki-config
        configMap:
          name: loki-config
      - name: loki-data
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: loki
  namespace: default
spec:
  type: NodePort
  selector:
    app: loki
  ports:
  - name: http
    port: 3100
    targetPort: 3100
    nodePort: 30100

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: default

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
rules:
- apiGroups:
  - ''
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- nonResourceURLs:
  - /metrics
  verbs:
  - get

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: default

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: default
data:
  prometheus.yml: "global:\n  scrape_interval: 15s\n  evaluation_interval: 15s\n\n\
    scrape_configs:\n  - job_name: 'kubernetes-service-endpoints'\n    kubernetes_sd_configs:\n\
    \    - role: endpoints\n    relabel_configs:\n    - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]\n\
    \      action: keep\n      regex: true\n    - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]\n\
    \      action: replace\n      target_label: __scheme__\n      regex: (https?)\n\
    \    - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]\n\
    \      action: replace\n      target_label: __metrics_path__\n      regex: (.+)\n\
    \    - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]\n\
    \      action: replace\n      regex: ([^:]+)(?::\\d+)?;(\\d+)\n      replacement:\
    \ $1:$2\n      target_label: __address__\n    - action: labelmap\n      regex:\
    \ __meta_kubernetes_service_label_(.+)\n    - source_labels: [__meta_kubernetes_namespace]\n\
    \      target_label: kubernetes_namespace\n    - source_labels: [__meta_kubernetes_service_name]\n\
    \      target_label: kubernetes_name\n\n  - job_name: 'api-node'\n    kubernetes_sd_configs:\n\
    \    - role: endpoints\n      namespaces:\n        names:\n        - ms-starter\n\
    \    relabel_configs:\n    - source_labels: [__meta_kubernetes_service_name]\n\
    \      action: keep\n      regex: api-node\n    - source_labels: [__meta_kubernetes_endpoint_port_name]\n\
    \      action: keep\n      regex: metrics\n"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      serviceAccountName: prometheus
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534
      containers:
      - name: prometheus
        image: prom/prometheus:v2.53.0
        args:
        - --config.file=/etc/prometheus/prometheus.yml
        - --storage.tsdb.path=/prometheus
        - --storage.tsdb.retention.time=7d
        - --web.enable-lifecycle
        ports:
        - containerPort: 9090
          name: web
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: web
          initialDelaySeconds: 10
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /-/ready
            port: web
          initialDelaySeconds: 10
          periodSeconds: 10
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 1Gi
        volumeMounts:
        - name: config
          mountPath: /etc/prometheus
        - name: data
          mountPath: /prometheus
      volumes:
      - name: config
        configMap:
          name: prometheus-config
      - name: data
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: default
  annotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port: '9090'
    prometheus.io/path: /metrics
spec:
  type: ClusterIP
  selector:
    app: prometheus
  ports:
  - name: web
    port: 9090
    targetPort: 9090

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: default
  labels:
    grafana_datasource: '1'
data:
  prometheus-datasource.yaml: "apiVersion: 1\ndatasources:\n- name: Prometheus\n \
    \ type: prometheus\n  access: proxy\n  url: http://prometheus.default.svc.cluster.local:9090\n\
    \  isDefault: true\n  jsonData:\n    timeInterval: 15s\n- name: Loki\n  type:\
    \ loki\n  access: proxy\n  url: http://loki.default.svc.cluster.local:3100\n \
    \ jsonData:\n    maxLines: 1000\n"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 472
        fsGroup: 472
      containers:
      - name: grafana
        image: grafana/grafana:10.4.3
        ports:
        - containerPort: 3000
          name: web
        env:
        - name: GF_SECURITY_ADMIN_USER
          value: admin
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: admin
        readinessProbe:
          httpGet:
            path: /login
            port: web
          initialDelaySeconds: 10
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /api/health
            port: web
          initialDelaySeconds: 10
          periodSeconds: 10
        volumeMounts:
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
      volumes:
      - name: grafana-datasources
        configMap:
          name: grafana-datasources

---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: default
spec:
  type: NodePort
  selector:
    app: grafana
  ports:
  - name: web
    port: 3000
    targetPort: 3000
    nodePort: 30030
